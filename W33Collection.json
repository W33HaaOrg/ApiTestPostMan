{
	"info": {
		"_postman_id": "ee44851b-a435-42a5-b88e-8186df821f56",
		"name": "W33Automate",
		"description": "W33 User Testing\nA Collection contain a set of Funtional testing and a set of Consumer-driven Contract Testing\nAPI to test: An set of APIs from MockApi.com\nNote:\n- All APIs are independent from each others. \n- The scripts contain delay 3 second for rate limit of MockApi.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Functional Testing - Standard",
			"item": [
				{
					"name": "MockApi (Standard)",
					"item": [
						{
							"name": "CreateUserSuccessfully",
							"item": [
								{
									"name": "Create a new user successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99c2fde7-6544-4f96-acbe-a2c81bc388cf",
												"exec": [
													"var response = pm.response;",
													"var jsonData = response.json();",
													"var userId = jsonData.id;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Verify response body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).is.not.null;",
													"});",
													"",
													"//Tear down",
													"//To remove the user that was created in this test case",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var deleteUrl = baseUrl + \"/users/\" + userId;",
													"const deleteRequest = {",
													"  url: deleteUrl,",
													"  method: 'DELETE',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(deleteRequest, (error, response) => {",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users"
											]
										},
										"description": "As an administrator, I want to create a new user"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetAllUsersSuccessfully",
							"item": [
								{
									"name": "GetAllUsersSuccessfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "909414e7-e649-4b36-b2fc-e4b4bc487ef2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var userId = pm.collectionVariables.get(\"UserId\");",
													"pm.test(\"Verify response body\", function () {",
													"    pm.expect(pm.response.text()).to.include(userId);",
													"});",
													"",
													"//Tear down",
													"//To remove the user that was created in this test case",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var userIdDelete = pm.collectionVariables.get(\"UserId\");",
													"var deleteUrl = baseUrl + \"/users/\" + userIdDelete;",
													"const deleteRequest = {",
													"  url: deleteUrl,",
													"  method: 'DELETE',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(deleteRequest, (error, response) => {",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b62d6d3-b4b0-4d00-a91e-f7f8f2bde168",
												"exec": [
													"//Setup",
													"//Create new user to make sure have at least one user item.",
													" ",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var createUrl = baseUrl + \"/users\";",
													"const createRequest = {",
													"  url: createUrl,",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(createRequest, (error, response) => {",
													"  pm.collectionVariables.set(\"UserId\",response.json().id);",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetUserByIdSuccessfully",
							"item": [
								{
									"name": "GetUserByIdSuccessfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbbbbee4-30dd-433d-a344-f6f0832dc9d7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var UserId = pm.collectionVariables.get(\"UserId\");",
													"pm.test(\"Verify response body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(UserId);",
													"});",
													"",
													"",
													"//Tear down",
													"//To remove the user that was created in this test case",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var userIdDelete = pm.collectionVariables.get(\"UserId\");",
													"var deleteUrl = baseUrl + \"/users/\" + userIdDelete;",
													"const deleteRequest = {",
													"  url: deleteUrl,",
													"  method: 'DELETE',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(deleteRequest, (error, response) => {",
													"  console.log(error ? error : response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fd5dedc9-93d1-490b-bf5f-a089f33a2b99",
												"exec": [
													"//Setup\r",
													"//Create new user to make sure have at least one user item.\r",
													" \r",
													"var baseUrl = pm.environment.get(\"BaseUrl\");\r",
													"var createUrl = baseUrl + \"/users\";\r",
													"const createRequest = {\r",
													"  url: createUrl,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(createRequest, (error, response) => {\r",
													"  pm.collectionVariables.set(\"UserId\",response.json().id);\r",
													"  console.log(error ? error : response.json());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users/{{UserId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"{{UserId}}"
											]
										},
										"description": "This is just an example to demo that we can you requests to prepare data and clear data instead of call API in Pre-request script and Tests."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EditNonExistentUser",
							"item": [
								{
									"name": "EditNonExistentUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68c67bcb-9b1a-41b9-b35d-5e8a3bf6893c",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify response body\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2020-10-31T00:30:13.711Z\",\n    \"name\": \"W33Haa\",\n    \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/33.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/users/1010",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"1010"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GetNonExistentUser",
							"item": [
								{
									"name": "GetUserByInvalidId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89046f8d-8c9e-481a-a57f-8e2f00ed45ba",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify response body\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users/101",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"101"
											]
										},
										"description": "As an administrator, I want to process the get a user\nby invalid UserId\nFor example: UserId = 101\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DeleteUserSuccessfully",
							"item": [
								{
									"name": "DeleteUserSuccessfully",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ec8533fc-e08b-4830-b838-2a00c15ddfbb",
												"exec": [
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var createUrl = baseUrl + \"/users\";",
													"const createRequest = {",
													"  url: createUrl,",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(createRequest, (error, response) => {",
													"  pm.environment.set(\"UserId\",response.json().id);",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3620fba3-1051-430e-8840-cab43d2e5c17",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var UserId = pm.environment.get(\"UserId\");",
													"pm.test(\"Verify response body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(UserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users/{{UserId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"{{UserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DeleteNonExistentUser",
							"item": [
								{
									"name": "DeleteNonExistentUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5ffd18c-3ab1-4fa6-839d-7940bc452fb1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Verify response body\", function () { ",
													"    pm.expect(pm.response.text()).to.include(\"Not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BaseUrl}}/users/101",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"101"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EditUserByIdSuccessfully",
							"item": [
								{
									"name": "EditUserByIdSuccessfully",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b0b6890-665f-4731-be3f-438fb415e4f2",
												"exec": [
													"//Setup",
													"//Create new user to edit it in the test case",
													" ",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var createUrl = baseUrl + \"/users\";",
													"const createRequest = {",
													"  url: createUrl,",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(createRequest, (error, response) => {",
													"  pm.environment.set(\"UserId\",response.json().id);",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c5a1a14e-6b68-4450-b688-f924c88dc242",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify response body\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql(\"W33Haa\");",
													"    pm.expect(jsonData.createdAt).to.eql(\"2020-10-31T00:30:13.711Z\");",
													"    pm.expect(jsonData.avatar).to.eql(\"https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/33.jpg\");",
													"});",
													"",
													"",
													"//TearDown",
													"//To remove the Item that was created in setup step",
													"",
													"var baseUrl = pm.environment.get(\"BaseUrl\");",
													"var userId = pm.environment.get(\"UserId\");",
													"var url = baseUrl + \"/users/\" + userId;",
													"const newRequest = {",
													"  url: url,",
													"  method: 'DELETE',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'X-Foo': 'bar'",
													"  }",
													"};",
													"",
													"pm.sendRequest(newRequest, (error, response) => {",
													"  console.log(error ? error : response.json());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"createdAt\": \"2020-10-31T00:30:13.711Z\",\n    \"name\": \"W33Haa\",\n    \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/33.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseUrl}}/users/{{UserId}}",
											"host": [
												"{{BaseUrl}}"
											],
											"path": [
												"users",
												"{{UserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "A set of functional test cases that consists of:\n- Setup of tear down for each test case to make sure it is independent with each other.\n- 4 type of APIs are Get, Put, Post, DELETE\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bda5d8eb-116d-4369-b3c3-de78f8fc125a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d460d8c-e223-43b3-b462-587f12eb8278",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Consumer-driven Contract Testing - Standard",
			"item": [
				{
					"name": "GetUserByIdSuccessfully",
					"item": [
						{
							"name": "Create a new user successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f557f94-51c2-4d1d-8f6b-a3dbe5171f0b",
										"exec": [
											"var responseJson = pm.response.json();",
											"var UserId = responseJson.id;",
											"pm.environment.set(\"UserId\",UserId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "As an administrator, I want to create a new user"
							},
							"response": []
						},
						{
							"name": "GetUserByIdSuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53d83355-aabd-43ca-a8a2-b1fdef59f1f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Define the schema expected in response",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"avatar\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"createdAt\",",
											"    \"name\",",
											"    \"avatar\"",
											"  ]",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users/{{UserId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"{{UserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUserSuccessfully",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc45e716-0e0a-4b39-93b3-f45592f35e15",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users/{{UserId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"{{UserId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateUserSuccessfully",
					"item": [
						{
							"name": "Create a new user successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff267e9c-b0de-4a30-8623-92899afbe49f",
										"exec": [
											"var response = pm.response;",
											"var jsonData = response.json();",
											"var userId = jsonData.id;",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    response.to.have.status(201);",
											"});",
											"",
											"// Define the schema expected in response",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"avatar\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"createdAt\",",
											"    \"name\",",
											"    \"avatar\"",
											"  ]",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});",
											"",
											"//Tear down",
											"//To remove the user that was created in this test case",
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var deleteUrl = baseUrl + \"/users/\" + userId;",
											"const deleteRequest = {",
											"  url: deleteUrl,",
											"  method: 'DELETE',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(deleteRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users"
									]
								},
								"description": "As an administrator, I want to create a new user"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetAllUsersSuccessfully",
					"item": [
						{
							"name": "GetAllUsersSuccessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2bd2cd9-c5a1-4375-b708-520ed4b751a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Define the schema expected in response",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\"",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});",
											"",
											"//Tear down",
											"//To remove the user that was created in this test case",
											"var userId = pm.environment.get(\"UserId\")",
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var deleteUrl = baseUrl + \"/users/\" + userId;",
											"const deleteRequest = {",
											"  url: deleteUrl,",
											"  method: 'DELETE',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(deleteRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a9410a0-51a6-45b5-8a5a-be5c6010d450",
										"exec": [
											"//Setup",
											"//Create new user to make sure have at least one user item.",
											" ",
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var createUrl = baseUrl + \"/users\";",
											"const createRequest = {",
											"  url: createUrl,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(createRequest, (error, response) => {",
											"  pm.environment.set(\"UserId\",response.json().id);",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetNonExistentUser",
					"item": [
						{
							"name": "GetUserByInvalidId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35842f63-76fc-4ae9-a425-ba60da95539f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"string\"",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users/101",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"101"
									]
								},
								"description": "As an administrator, I want to process the get a user\nby invalid UserId\nFor example: UserId = 101\n"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DeleteUserSuccessfully",
					"item": [
						{
							"name": "DeleteUserSuccessfully",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b554d571-4d25-4b43-bdfb-cf146f2adf2e",
										"exec": [
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var createUrl = baseUrl + \"/users\";",
											"const createRequest = {",
											"  url: createUrl,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(createRequest, (error, response) => {",
											"  pm.environment.set(\"UserId\",response.json().id);",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96dff6ca-f5ee-43f5-86b5-842edcfea735",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"avatar\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"createdAt\",",
											"    \"name\",",
											"    \"avatar\"",
											"  ]",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users/{{UserId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"{{UserId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DeleteNonExistentUser",
					"item": [
						{
							"name": "DeleteNonExistentUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1eb9ca-95f2-4a8d-961f-3b0927c062ca",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"string\"",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}/users/101",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"101"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EditUserByIdSuccessfully",
					"item": [
						{
							"name": "EditUserByIdSuccessfully",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf015376-3a62-4397-bb61-75ee5f2b1af0",
										"exec": [
											"//Setup",
											"//Create new user to edit it in the test case",
											" ",
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var createUrl = baseUrl + \"/users\";",
											"const createRequest = {",
											"  url: createUrl,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(createRequest, (error, response) => {",
											"  pm.environment.set(\"UserId\",response.json().id);",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab2ede7c-bbfa-4442-987e-3d99aefd2099",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var UserId = pm.environment.get(\"UserId\");",
											"",
											"// Define the schema expected in response",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"createdAt\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"avatar\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"createdAt\",",
											"    \"name\",",
											"    \"avatar\"",
											"  ]",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});",
											"",
											"//TearDown",
											"//To remove the Item that was created in setup step",
											"",
											"var baseUrl = pm.environment.get(\"BaseUrl\");",
											"var userId = pm.environment.get(\"UserId\");",
											"var url = baseUrl + \"/users/\" + userId;",
											"const newRequest = {",
											"  url: url,",
											"  method: 'DELETE',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  }",
											"};",
											"",
											"pm.sendRequest(newRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"createdAt\": \"2020-10-31T00:30:13.711Z\",\n    \"name\": \"W33Haa{{UserId}}\",\n    \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/33.jpg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/users/{{UserId}}",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"{{UserId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EditNonExistentUser",
					"item": [
						{
							"name": "EditNonExistentUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1026d80-7ac9-4e25-bf5e-b059c9b6d0bd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"var responseSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"string\"",
											"}",
											"// Get response data as JSON",
											"var jsonData = pm.response.json();",
											"// Test for response data structure",
											"pm.test('Ensure expected response structure', function () {",
											"    var validation = tv4.validate(jsonData, responseSchema);",
											"    pm.expect(validation).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"createdAt\": \"2020-10-31T00:30:13.711Z\",\n    \"name\": \"W33Haa\",\n    \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/33.jpg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/users/1010",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"users",
										"1010"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "A set of Contract Testing consists of:\n- Verify json body data to make sure it follows the contract\n- 4 type of API types: Get, Post, Put, Delete\n- Verify 3 types of body: string, json object, json array base on schema\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "55ab4c5b-4098-4cf0-b881-4ef8c9464254",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "87772695-0382-4c8e-bb56-9c57dd16ff8a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Functional Testing - Advance",
			"item": [
				{
					"name": "OpenWeatherMap (Advance)",
					"item": [
						{
							"name": "CurrentWeather (Advance level 1 - Removing hardcode)",
							"item": [
								{
									"name": "GetCurrentWeatherSuccessfully",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6768e842-80e5-436f-a2b8-af7c290bc983",
												"exec": [
													"pm.collectionVariables.set(\"OwCityName\",\"Hanoi\")",
													"pm.collectionVariables.set(\"OwStateCode\",\"10999\")",
													"pm.collectionVariables.set(\"OwCountryCode\",\"VN\")",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "125ca665-1cda-465a-af11-99bf51347f7a",
												"exec": [
													"var stateCode = pm.collectionVariables.get(\"OwCityName\");",
													"var statusCode = 200;",
													"var countryCode = pm.collectionVariables.get(\"OwCountryCode\");",
													"",
													"pm.test(\"Status code is \"+ statusCode, function () {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"pm.test(\"Verify name of city\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql(stateCode);",
													"});",
													"",
													"pm.test(\"Verify country code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.sys.country).to.eql(countryCode);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/weather?q={{OwCityName}},{{OwStateCode}},{{OwCountryCode}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": "{{OwCityName}},{{OwStateCode}},{{OwCountryCode}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCurrentWeatherWithInvalidCityName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "229f2977-79c7-4f57-83e3-49b37f653c32",
												"exec": [
													"pm.collectionVariables.set(\"OwCityName\",\"HanoiInvalid\")",
													"pm.collectionVariables.set(\"OwStateCode\",\"10999\")",
													"pm.collectionVariables.set(\"OwCountryCode\",\"84\")",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5593ad3f-bfc0-47a1-9528-4af52ea144b4",
												"exec": [
													"var statusCode = 404;",
													"var errorMessage = \"city not found\";",
													"",
													"pm.test(\"Status code is \"+ statusCode, function () {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"",
													"pm.test(\"Verify error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(errorMessage);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/weather?q={{OwCityName}},{{OwStateCode}},{{OwCountryCode}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": "{{OwCityName}},{{OwStateCode}},{{OwCountryCode}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCurrentWeatherSuccessfullyWithInvalidApiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "347f96d2-2038-4155-bab6-17c6ac5a843d",
												"exec": [
													"pm.collectionVariables.set(\"OwCityName\",\"Hanoi\");",
													"pm.collectionVariables.set(\"OwStateCode\",\"10999\");",
													"pm.collectionVariables.set(\"OwCountryCode\",\"84\");",
													"pm.collectionVariables.set(\"OwKey\",\"841344\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "683936c2-b912-4998-8eb6-7a85622f089f",
												"exec": [
													"var statusCode = 401;",
													"var errorMessage = \"Invalid API key. Please see http://openweathermap.org/faq#error401 for more info.\"",
													"",
													"pm.test(\"Status code is \" + statusCode, function () {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"",
													"pm.test(\"Verify error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(errorMessage);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/weather?q={{OwCityName}},{{OwStateCode}},{{OwCountryCode}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": "{{OwCityName}},{{OwStateCode}},{{OwCountryCode}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCurrentWeatherWithOutApiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0faeb38a-c6ec-4983-9f00-5d446f4e25ab",
												"exec": [
													"pm.collectionVariables.set(\"OwCityName\",\"Hanoi\");",
													"pm.collectionVariables.set(\"OwStateCode\",\"10999\");",
													"pm.collectionVariables.set(\"OwCountryCode\",\"84\");",
													"pm.collectionVariables.set(\"OwKey\",\"841344\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "406249bb-fc19-412f-99ce-8c4b4be828c8",
												"exec": [
													"var statusCode = 401;",
													"var errorMessage = \"Invalid API key. Please see http://openweathermap.org/faq#error401 for more info.\"",
													"",
													"pm.test(\"Status code is \" + statusCode, function () {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"",
													"pm.test(\"Verify error message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(errorMessage);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/weather?q={{OwCityName}},{{OwStateCode}},{{OwCountryCode}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"weather"
											],
											"query": [
												{
													"key": "q",
													"value": "{{OwCityName}},{{OwStateCode}},{{OwCountryCode}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99ac630c-d1bf-45b6-b454-2f5d9ae973bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "114d4380-dbfa-41fa-be68-37589333ac48",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "OneCall (Advance level 2 - Using common function)",
							"item": [
								{
									"name": "OneCallSuccessfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e81d10e-1e75-4ecc-81b9-2f53dd78151f",
												"exec": [
													"var statusCode = 200;",
													"var timeZone = \"Etc/GMT+6\";",
													"",
													"let utils = eval(environment.utils)();",
													"utils.verify.statusCode(statusCode);",
													"utils.verify.timeZone(timeZone);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bbe3da0c-a14f-4583-9f97-425fc15b560e",
												"exec": [
													"pm.collectionVariables.set(\"lat\",\"11.44\");",
													"pm.collectionVariables.set(\"lon\",\"-94.01\");",
													"pm.collectionVariables.set(\"exclude\",\"hourly\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/onecall?lat={{lat}}&lon={{lon}}&exclude={{exclude}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{lat}}"
												},
												{
													"key": "lon",
													"value": "{{lon}}"
												},
												{
													"key": "exclude",
													"value": "{{exclude}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OneCallWithInvalidLat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "161c78eb-c0af-46fa-a7e6-c83af841dd17",
												"exec": [
													"var statusCode = 400;",
													"var errorMessage = \"wrong latitude\";",
													"",
													"let utils = eval(environment.utils)();",
													"utils.verify.errorMessage(errorMessage);",
													"utils.verify.statusCode(statusCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7fef87a5-229b-4500-8c4b-67fb3a8ec104",
												"exec": [
													"pm.collectionVariables.set(\"lat\",\"111.44\");",
													"pm.collectionVariables.set(\"lon\",\"-94.01\");",
													"pm.collectionVariables.set(\"exclude\",\"hourly\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/onecall?lat={{lat}}&lon={{lon}}&exclude={{exclude}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{lat}}"
												},
												{
													"key": "lon",
													"value": "{{lon}}"
												},
												{
													"key": "exclude",
													"value": "{{exclude}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OneCallWithInvalidLon",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "808f3591-bf63-4535-ae3c-4accd49590a0",
												"exec": [
													"var statusCode = 400;",
													"var errorMessage = \"wrong longitude\";",
													"",
													"let utils = eval(environment.utils)();",
													"utils.verify.errorMessage(errorMessage);",
													"utils.verify.statusCode(statusCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8150c645-3265-4b00-886b-f9a4bf5b1e40",
												"exec": [
													"pm.collectionVariables.set(\"lat\",\"11.44\");",
													"pm.collectionVariables.set(\"lon\",\"-904.01\");",
													"pm.collectionVariables.set(\"exclude\",\"hourly\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{OwBaseUrl}}/data/2.5/onecall?lat={{lat}}&lon={{lon}}&exclude={{exclude}}&appid={{OwKey}}",
											"host": [
												"{{OwBaseUrl}}"
											],
											"path": [
												"data",
												"2.5",
												"onecall"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{lat}}"
												},
												{
													"key": "lon",
													"value": "{{lon}}"
												},
												{
													"key": "exclude",
													"value": "{{exclude}}"
												},
												{
													"key": "appid",
													"value": "{{OwKey}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4aaa25c-5d48-4728-8b34-148fea70d040",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e27bd0a1-a788-450a-afed-552f6cd58a49",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "359341da-1afb-4c05-999b-fff088e558e9",
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set(\"OwKey\",\"6734fe9c66536a37749bf3c2b40863a9\");",
									"pm.collectionVariables.set(\"OwBaseUrl\",\"https://api.openweathermap.org\");",
									"",
									"postman.setEnvironmentVariable(\"utils\", () => {",
									"    var statusCode = (statusCode) => {",
									"        pm.test(\"StatusCode is \" + statusCode, function () {",
									"            pm.response.to.have.status(statusCode);",
									"        });",
									"    }",
									"",
									"    var timeZone = (timeZone) => {",
									"        pm.test(\"Timezone is \" + timeZone, function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.timezone).to.eql(timeZone);",
									"        });",
									"    }",
									"",
									"    var errorMessage = (errorMessage) => {",
									"        pm.test(\"Verify error messaage\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.message).to.eql(errorMessage);",
									"        });",
									"    }",
									"",
									"    return {",
									"       verify: {",
									"        errorMessage,",
									"        statusCode,",
									"        timeZone",
									"       }",
									"       ",
									"    };",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "909f9411-36e1-475c-8696-223bdf45e5f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2b2cc00e-5f70-4a47-a76c-e11baa2e1750",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e95da9fa-4ccd-4991-8b10-4e8dc2549fad",
				"type": "text/javascript",
				"exec": [
					"setTimeout(function(){",
					"          console.log(\"Sleeping for 5 seconds before next request.\");",
					"  }, 3000);"
				]
			}
		}
	],
	"variable": [
		{
			"id": "106468d9-871d-4cd7-b2fe-f91cae6047f1",
			"key": "OwBaseUrl",
			"value": ""
		},
		{
			"id": "6d272292-8964-4946-94c0-40c40a4ee488",
			"key": "OwKey",
			"value": ""
		},
		{
			"id": "ca21b259-208c-4c2d-9379-c8f902b94060",
			"key": "exclude",
			"value": ""
		},
		{
			"id": "d89b07e5-c418-47fb-b99c-8f43f7cad383",
			"key": "lat",
			"value": ""
		},
		{
			"id": "8044c987-b08d-403b-8235-eff0b9b15ecb",
			"key": "lon",
			"value": ""
		},
		{
			"id": "71d7565b-6399-4934-9194-f96a66ba6796",
			"key": "OwCityName",
			"value": ""
		},
		{
			"id": "1133b5b5-7b83-405e-a747-de8ce934c58b",
			"key": "OwCountryCode",
			"value": ""
		},
		{
			"id": "c85a4cb7-3fe2-4e90-baca-7cd42f3597c3",
			"key": "OwStateCode",
			"value": ""
		},
		{
			"id": "771a57b5-f978-4b78-a1b0-3a1e467c20de",
			"key": "UserId",
			"value": ""
		},
		{
			"id": "75826e8d-9406-48b1-b0b0-4814ad31007e",
			"key": "Status",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}